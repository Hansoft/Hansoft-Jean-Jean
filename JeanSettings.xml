<?xml version="1.0" encoding="utf-8" ?>
<Configuration>
  
  <!--
  Configuration - Loading Assemblies
  ==================================
  Custom assemblies that should be loaded on startup. Typically this is used to load additional behaviors but it can really
  be used to load any assembly, for example a library that is used by a behavior that you are implementing. To create add an additional
  behavior you need to create a shared library (DLL) with a class that subtypes the abstract class AbstractBehavior. See also the provided
  examples NumberBehavior, CopyBehavior, DeriveBehavior, and DefaultValueBehavior.
   -->
  <LoadAssemblies>
    <Assembly Path="NumberBehavior.dll" />
    <Assembly Path="CopyBehavior.dll" />
    <Assembly Path="DeriveBehavior.dll" />
    <Assembly Path="DefaultValueBehavior.dll" />
    <Assembly Path="TrackLastStatusChangeBehavior.dll" />
    <Assembly Path="AssignReleaseRiskBehavior.dll" />
    <Assembly Path="DerivedColumnExpressionExample.dll" />
  </LoadAssemblies>op
  
  <!--
  Configuration - Connecting to a Hansoft Database
  =================================================
    The connection parameters are common for all behaviors, hence Jean for Hansoft can currently only operate on one database at the time,
  
    HansoftServerHost         : IP or DNS name of the Hansoft server
    HansoftServerPort         : The listen port of the Hansoft server
    HansoftSdkUser            : Name of the Hansoft SDK User account
    HansoftSdkUserPassword    : Password of the Hansoft SDK User account
    HansoftDatabase           : Name of the Hansoft Database to get data from
    EventWindow               : The max number of milliseconds that events will be buffered/queued for. This is used to avoid excessive server load when
                                you have behaviors that potentially have a significant impact on the server load.
    -->
  <!-- Connect to the database MyDB on the Hansoft server running on the local machine on port 50256 as the SDK user sdk with password sdk. Use event buffering upto 1 second. -->
  <Connection HansoftServerHost="localhost" HansoftServerPort="50256" HansoftDatabase="MyDB" HansoftSdkUser="sdk" HansoftSdkUserPassword="sdk" EventWindow="1000"/>
  
  <!-- 
  In the Behaviors section you specify what behaviors that you want to apply you can specify multiple behaviors of the same or different types as you like.
  NOTE: Whenever you add additional behaviors it is important that you monitor server load carefully for some time including peak usage to avoid adding
  to many performance demanding behaviors that risk to be detrimental to server performance with an impact to human users.
  -->
  <Behaviors>
  
    <!--
    Number Behavior
    ===============
    This behavior useful if you want to have a ranking number in the product backlog hierarchy in Hansoft. The number is
    kept in a selectable Hansoft column (of type text). When the column is added to your Hansoft project it should be set
    to a readonly column so it isn't advertently changed.

    The numbering is updated automatically as items in the product backlog hierarchy are moved/added/deleted.
    
    HansoftProject            : Name of the Hansoft project
    View                      : Specifies the View to which the numbering should be applied (Agile, Scheduled, Backlog)
    NumberingStyle            : Hierarchical numbering mean to e.g. to denote the second child of the first parent as 1.2, the default is Flat
                                numbering, i.e. to number each set of siblings 1, 2, 3 and so on. Hence the supported values are "Hierarchical" or "Flat".
    ColumnName                : Specifies the Hansoft column to keep the numbering, this should be a readonly custom column of type Text
    LabelLevels               : Only specified levels in the hierarchy will be labeled. Levels are counted from the top staring with 1.
                                Specifying this setting is exclusive with specifying the IgnoreLevels setting.
    IgnoreLevels              : Specified levels will not be labeled.  Levels are counted from the top staring with 1.
                                Specifying this setting is exclusive with specifying the LabelLevels setting.

    Example
    '''''''
    To add hierarchical numbering to the custom column Rank (of type text) in the product backlog of the project MyProject, uncomment the following line: 
    -->
    <!--
    <NumberBehavior HansoftProject="MyProject" View="Backlog" ColumnName="Rank" NumberingStyle="Hierarchical" LabelLevels="" IgnoreLevels="" />
    -->
    
    <!--
    Copy Behavior
    =============
    This is useful if you have linked items and you want to propagate data to items that have links. The linked items can
    potentially be in separate projects. The data is updated automatically as the data on the source items are changed.
    
    TargetProject             : The Hansoft project containing the items to which data should be copied
    TargetView                : Specifies the View to which data should be copied (Agile, Scheduled, Bugs, Backlog)
    TargetFind                : A Find query that specifies the items to which data should be copied.
    SourceProject             : The Hansoft project containing the items from which data should be copied
    SourceView                : Specifies the View from which data should be copied (Agile, Scheduled, Bugs, Backlog)
    SourceFind                : A Find query that specifies the items from which data should be copied.
    
    For each column that should be copied you then specify one ColumnMapping element. The ColumnMapping should contain one Source element
    and one Target Element that each should contain one subelement. The Subeelement can either be of type CustomColumn where the name of
    the column is specified with the Name attribute, or one of the following to indicate one of the builtin columns in Hansoft:
    * Risk
    * Priority
    * EstimatedDays
    * Category
    * Points
    * Status
    * Confidence
    * Hyperlink
    * Name
    * WorkRemaining
    
    Generally speaking it is safest to map columns of the same type to one another. But as long as it possible to convert a value from one
    type or another it is possible to map one column type to another type. For example, all column types can be mapped to a Text type column.
    
    Example
    '''''''
    Uncomment the following section to synchronize selected columns of linked items from the product backlog in the  project Program to the
    product backlog in the project Portfolio.
    -->
    <!--
    <CopyBehavior TargetProject="Portfolio" TargetView="Backlog" TargetFind="" SourceProject="Program" SourceView="Backlog" SourceFind="">
      <ColumnMapping>
        <Source>
          <CustomColumn Name="Aggregated Status"/>
        </Source>
        <Target>
          <Status />
        </Target>
      </ColumnMapping>
      <ColumnMapping>
        <Source>
          <CustomColumn Name="Aggregated Estimated days"/>
        </Source>
        <Target>
          <EstimatedDays />
        </Target>
      </ColumnMapping>
      <ColumnMapping>
        <Source>
          <CustomColumn Name="Days completed"/>
        </Source>
        <Target>
          <CustomColumn Name="Days completed"/>
        </Target>
      </ColumnMapping>
      <ColumnMapping>
        <Source>
          <CustomColumn Name="Product Owner"/>
        </Source>
        <Target>
          <CustomColumn Name="Product Owner"/>
        </Target>
      </ColumnMapping>
      <ColumnMapping>
        <Source>
          <CustomColumn Name="Estimated Release Date"/>
        </Source>
        <Target>
          <CustomColumn Name="Estimated Release Date"/>
        </Target>
      </ColumnMapping>
    </CopyBehavior>
    -->
   
    <!-- 
    Derive Behavior
    ===============
    The derive behavior is used to have a column value that is derived automatically based on the values of other columns and items.
    
    How the derived value should be calculated is specified by a C# expression in the Expression attribute of the configuration settings below.
    
    Simple expressions can be specified directly. If you have more complex expressions it is reccommended that you do the calculation in a separate
    DLL that is loaded in the LoadAssemblies section of JeanSettings.xml (see above).

    You can always refer to the current task with current_task. Note that this will be a task object provided by the ObjectWrapper. You can return
    any value in the expression but for the behavior to work the following constraints apply:
    
    Builtin columns
    '''''''''''''''
    The following builtin columns are currently supported:
    * Risk
    * Priority
    * EstimatedDays
    * Category
    * Points
    * Status
    * Confidence
    * Hyperlink
    * Name
    * WorkRemaining
    
    For numeric and plain text columns you specify the value as it is displayed in the Hansoft client. This is applies for the following columns:
    * EstimatedDays - The expression should return a floating point value or a value that can be converted to floating point.
    * Points - The expression should return an integer value or a value that can be converted to an integer.
    * Hyperlink - Any type of expression is allowed as its ToString() method will be applied.
    * Name - Any type of expression is allowed as its ToString() method will be applied.
    * WorkRemaining - The expression should return a floating point value or a value that can be converted to floating point.
    
    For enumerables you should specify the ordinal number corresponding to the enum value. The expression should return an integer or a value
    that can be convereted to an integer. This applies for the following columns:
    * Risk (Low Risk = 2, Medium Risk = 3, High Risk = 4)
    * Priority (Very Low Priority = 2, Low Priority = 3, Medium Priority = 4, High Priority = 5, Very High Priority = 6)
    * Category (Requirement = 2, Enhancement = 3, Technology upgrade = 4, Bug(A) = 5, Bug(B) = 6, Bug(C) = 7, Bug(D) = 8)
    * Status (Not done = 2, In progress = 3, Completed = 4, Blocked = 5, To be deleted = 6)
    * Confidence (Low Confidence = 2, Medium Confidence = 3, High Confidence = 4)
    
    Custom columns
    ''''''''''''''
    For columns of the following types you specify the value as it is displayed in the Hansoft client:
    * Text
    * Hyperlink
    * Droplist single choice
    * Droplist multiple choice. The differen items are separated by semicolon (;),
    * Number
    * Number with Decimals
    * Time spent
    * People
    
    Other columns
    * When specifying default values for For multiline text columns you insert line breaks with \n and backslashes with \\.
    * Default values for Date columns should be specified in the Short Date Format as specified in the Windows Region and Language settings.
    * Default values for Date Time columns should be specified in the Long Time Format as specified in the Windows Region and Language settings. Note
      however that the actual time value should be specified as UTC, not the local time.
    
    NOTE: To specify a string constant in the expression you will need to replace double quoutes with  "&quot;" to make sure that the XML attribute
    value specifying the expression is parsed correctly.
    
    NOTE: Floating point values always use period (.) as the decimal symbol, regardless of the Region settings in Windows. I.e., you should specify
    values as they appear in Hansoft.
    
    Example
    '''''''
    Uncomment the following section to derive column values in the product backlog of the project MyProject as follows:
    1. Set the custom column Child count to the number of children of the current task    
    2. Set the the custom column Aggregated Status to the aggregated status value of the current task.
    3. Set the the custom column Aggregated Estimated days to the aggregated estimated days value of the current task.
    4. Set the the custom column Days completed to the sum of the estimated days for all completed items that are children of the current task.
    5. Set the custom column completion count to the result of the static function CompletionCount defined in the CompletionCounter class which is a custom
    class defined in an assembly that is loaded in the <LoadAssemblies> section.
    -->
    <!--
    <DeriveBehavior HansoftProject="MyProject" View="Backlog" Find="">
      <CustomColumn Name="Child count" Expression="current_task.Children.Count" />
      <CustomColumn Name="Aggregated Status" Expression="current_task.AggregatedStatus" />
      <CustomColumn Name="Aggregated Estimated days" Expression="current_task.AggregatedEstimatedDays" />
      <CustomColumn Name="Days completed" Expression="current_task.DeepLeaves.FindAll(task => ((Task)task).Status.Equals(EHPMTaskStatus.Completed)).Sum(task => ((Task)task).EstimatedDays)" />
      <CustomColumn Name="Completion count" Expression="Hansoft.Jean.Behavior.DeriveBehavior.Expressions.CompletionCounter.CompletionCount(current_task)" />
    </DeriveBehavior>
    -->
    
    <!-- 
    Default Value Behavior
    ======================
    This behavior is used to set a column to a default value whenever an item is created. Depending on the type of the
    column the value should be specified as follows:
    
    HansoftProject           : The Hansoft project containing the items to which data should be copied
    View                     : Specifies the View for which the default value is applicable (Agile, Scheduled, Bugs, Backlog)
    
    Builtin columns
    '''''''''''''''
    The following builtin columns are currently supported:
    * Risk
    * Priority
    * EstimatedDays
    * Category
    * Points
    * Status
    * Confidence
    * Hyperlink
    * Name
    * WorkRemaining
    
    For numeric and plain text columns you specify the value as it is displayed in the Hansoft client. This is applies for the following columns:
    * EstimatedDays
    * Points
    * Hyperlink
    * Name
    * WorkRemaining
    
    For enumerables you should specify the ordinal number corresponding to the enum value. This applies for the following columns:
    * Risk (Low Risk = 2, Medium Risk = 3, High Risk = 4)
    * Priority (Very Low Priority = 2, Low Priority = 3, Medium Priority = 4, High Priority = 5, Very High Priority = 6)
    * Category (Requirement = 2, Enhancement = 3, Technology upgrade = 4, Bug(A) = 5, Bug(B) = 6, Bug(C) = 7, Bug(D) = 8)
    * Status (Not done = 2, In progress = 3, Completed = 4, Blocked = 5, To be deleted = 6)
    * Confidence (Low Confidence = 2, Medium Confidence = 3, High Confidence = 4)
    
    Custom columns
    ''''''''''''''
    For columns of the following types you specify the value as it is displayed in the Hansoft client:
    * Text
    * Hyperlink
    * Droplist single choice
    * Droplist multiple choice. The differen items are separated by semicolon (;),
    * Number
    * Number with Decimals
    * Time spent
    * People
    
    Other columns
    * When specifying default values for For multiline text columns you insert line breaks with \n and backslashes with \\.
    * Default values for Date columns should be specified in the Short Date Format as specified in the Windows Region and Language settings.
    * Default values for Date Time columns should be specified in the Long Time Format as specified in the Windows Region and Language settings. Note
      however that the actual time value should be specified as UTC, not the local time.
      
    Example
    '''''''
    To set a default template for the name of new items created in the product backlog of the project MyProject, uncomment the following:
    --> 
    <!--
    <DefaultValueBehavior HansoftProject="MyProject" View="Backlog">
      <Name DefaultValue="As a (role) I want to (something) so I can (benefit)" />
    </DefaultValueBehavior>
    -->

    <!--
    Track Last Status Change Behavior
    =================================
    This behavior useful if you want to track when product backlog items last changed their status. 

    The behavior has parameters as follows:
    HansoftProject            : Name of the Hansoft project in which you want to track status changes in the product backlog.
    TrackingColumn            : Specifies the Hansoft column to keep the time stamp for the last status change, this should be a readonly custom column of type Date and time.

    Example
    '''''''
    To add tracking of the last status change in the column "Status last changed" in the product backlog of the project MyProject, uncomment the following line: 
    -->
    <!--
    <TrackLastStatusChangeBehavior HansoftProject="MyProject" TrackingColumn="Status last changed" />
    -->

    <!--
    Assign Release Risk Behavior
    ============================
    This behavior useful if you want to track the risk that product backlog items will miss their assigned release date. The behavior automatically updates a column in the product backlog
    that defines the release risk for an item. Items are categorized as "Done", "Low risk", "Medium risk", or "High risk". The items that are targeted to a particular release are calculated
    in the same way as when release burndowns are calculated in the Hansoft client. Items are considered as part of a release if:
    a) The item is committed to a sprint and that sprint is tagged to the release.
       or
    b) The item is not committed to a sprint but it is tagged in the product backlog to the release.
    
    The release risk is based on the predicted veloicty (same as if you hover over a future date in the release burndown in Hansoft) and the number of remaining working days until the
    release date. This gives the expected number of points or ideal days that can be completed from the current time up to the release date. This is the "Expected" value. The release risk value is then calculated using
    a  provided "Factor" that is between 0 an 1 as follows:
    Done         - Items that have the status Completed.
    Low risk     - Items that fit within (1-Factor)*Expected
    Medium risk  - Items that fit within (1+Factor)*Expected
    High risk    - Any remaining items that are not completed and don't fit within (1+Factor)*Expected.
    
    The behavior has parameters as follows:
    HansoftProject            : Name of the Hansoft project in which you want to track release risk in the product backlog.
    TrackingColumn            : Specifies the Hansoft column that tracks the release risk. This should be a readonly custom column of type Drop list single choice. There should be four values defined
                                representing done, low risk, medium risk and high risk items respectively.
    RiskValues                : Defines the name of the different risk levels in the Hansoft client. These values must exactly match the values provided in the column defintion in Hansoft.
                                The items are provided as a comma-separated list in the order "<done-value>, <low-risk-value>, <medium-risk-value>, <high-risk-value>".
    ParentName                : The releases for which backlog items should be assigned a release risk must be placed in a subproject in the Hansoft schedule with a name defined by this parameter.
    PointsOrDays              : Defines whether release risk is calculated based on Points or Ideal days as the estimate for backlog items. Allowed values are "Days" or "Points".
    Factor                    : The factor that is used to calculate the limits for low, medium, and high release risk. Note that your localized floating point separator should be used (comma below
                                which you may need to change to e.g., a point depending on your locale.

    Example
    '''''''
    To add tracking of the last status change in the column "Status last changed" in the product backlog of the project MyProject, uncomment the following line: 
    -->
    <!--
    <AssignReleaseRiskBehavior HansoftProject="MyProject" TrackingColumn="Release risk" RiskValues="Done, Low risk, Medium risk, High risk" ParentName="Features" PointsOrDays="Days" Factor="0,2" />
    -->
  </Behaviors>
</Configuration>